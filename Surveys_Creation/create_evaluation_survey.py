from api_service import basic_service
from private import appInfo


def main():
    # template ID : 111307043
    client = basic_service.ApiService(appInfo.ACCESS_TOKEN)
    #clone_id = clone_survey(client, "Evaluation 1", 111307043)
    #print(clone_id)  # 111818063
    # ids = get_survey_page_ids(client, 111818063)  # ['27801977', '27801978', '27801979', '27801980', '27801981', '27801982', '27801983', '27801984', '27801985', '27801986']

    sample_abstract = "OBJECTIVES:To provide a simple method to make a stable ΔF508-CFTR-expressing T84 cell line that can be used as an efficient screening model system for ΔF508-CFTR rescue. RESULTS:CFTR knockout cell lines were generated by Cas9 with a single-guide RNA (sgRNA) targeting exon 1 of the CFTR genome, which produced indels that abolished CFTR protein expressions. Next, stable ΔF508-CFTR expression was achieved by genome integration of ΔF508-CFTR via the lentivirus infection system. Finally, we showed functional rescue of ΔF508-CFTR not only by growing the cells at a low temperature, but also incubating with VX-809, a ΔF508-CFTR corrector, in the established T84 cells expressing ΔF508-CFTR. CONCLUSIONS:This cell system provides an appropriate screening platform for rescue of ΔF508-CFTR, especially related to protein folding, escaped from endoplasmic-reticulum-associated protein degradation, and membrane transport.KEYWORDS:CRISPR/Cas9; Epithelial cell; Genome editing; T84 cell line; ΔF508-CFTR"

    survey_id = 111818063
    page_id = 27801977


    #r = modify_survey_page_target_abstract(client, survey_id, page_id, "Abstract XXX ", sample_abstract)
    #print(r)
    # print(client.get_questions_ids( survey_id, page_id )) # ['71861605', '71861606', '71861607']
    question_id = 71861605
    question_AbstractA_id = 71861606
    question_AbstractB_id = 71861607

    #r = modify_question_text(client, survey_id, page_id, question_id, "12345")
    #print(r)
    r2 = modify_abstract(client, survey_id, page_id, question_AbstractA_id, sample_abstract, True)
    print(r2)


def get_surveys(client):
    return client.get_surveys()

def get_survey_page_ids(client, survey_id):
    result = client.get_pages_ids(survey_id)
    return result

def get_page_question_ids(client, survey_id, page_ids):
    """ Return the question ids in a given page. In our use case, there should be 3 : one for the question itself, and two for the two abstract paragraphs. """

    return client.get_pages_ids(survey_id, page_ids)

def create_evaluation_template(client, survey_name):
    """ Create a survey template """

    loremipsum = "Lorem ipsum dolor sit amet, consecteteur adipiscing elit donec proin nulla vivamus. Augue donec a erat ve sagittis nisi rhoncus curabitur mauris. Nulla ipsum tortor sagittis adipiscing primis interdum suspendisse lobortis etiam risus nullam. Donec massa quam dis at nibh dolor netus quis. Purus etiam. Dolor neque nunc netus eget nulla faucibus vestibulum aenean class senectus. Porta dolor. Donec morbi. Felis lorem tempus luctus malesuada laoreet curae justo rhoncus ante facilisi parturient malesuada elit laoreet amet. Fusce augue nisi ligula praesent condimentum nascetur fringilla in id lectus per nunc. Lacus metus nisl orci odio maecenas adipiscing. Velit nulla a tempor class placerat ac condimentum nisi taciti at eros."

    loremipsum_A = "A: \n" + loremipsum
    loremipsum_B = "B: \n" + loremipsum

    # Create a new survey
    survey_id = client.create_survey(survey_name)
    # Create 2 more pages in the survey
    for i in range(0, 2):
        client.create_new_page(survey_id, str(i), loremipsum) # title and description

    # Get the page ids
    page_ids = client.get_pages_ids(survey_id) # There will be 3

    answers = ["A", "B"]
    question_title = "Which of the following abstract is more relevant to the one above?"
    for i, ID in enumerate(page_ids):
        client.update_title_description_of_page(survey_id, ID, "Abstract" + str(i), loremipsum)
        client.add_single_choice(survey_id, ID, question_title, answers)
        client.add_paragraph(survey_id, ID, loremipsum_A)
        client.add_paragraph(survey_id, ID, loremipsum_B)

def clone_survey(client, survey_name, template_id):
    """ Make a copy of a survey given the survey id """
    clone_id = client.clone_survey(survey_name, template_id)
    return clone_id

def modify_survey_page_target_abstract(client, survey_id, page_id, new_title, target_abstract):
    """ Modify the target abstract text of a page in a survey """
    response = client.update_title_description_of_page(survey_id, page_id, new_title, target_abstract)
    return response

def modify_question_text(client, survey_id, page_id, question_id, abstract_pmid):
    """ Modify the question """
    title = "Which of the following abstracts are closest to abstract " + str(abstract_pmid)
    answers = ["A", "B"]
    response = client.replace_single_choice_question(survey_id, page_id, question_id, title, answers)
    return response

def modify_abstract(client, survey_id, page_id, question_id, text, left=True):
    """ Change the A or B abstract """  # TODO: make the A / B more distinguishable
    if left:
        text = "A: \n" + text
    else:
        text = "B: \n" + text
    client.replace_paragraph_text(survey_id, page_id, question_id, text)


if __name__ == '__main__':
    main()
